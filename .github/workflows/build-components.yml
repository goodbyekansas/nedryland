name: üèóÔ∏è Build Components ü¶ï

on:
  workflow_call:
    secrets:
      nix-access-key:
        description: SSH key to use for accessing repositories through nix.
        required: true

      nix-builders-access-key:
        description: SSH key to use for accessing builders, defaults to the same used for repositories.
        required: false

      cachix-signing-key:
        description: Cachix signing key.
        required: false

      cachix-auth-token:
        description: Cachix auth token.
        required: false

    inputs:
      build-platform:
        description: "The nix platform to run the build on, available options are x86_64-linux (default) and x86_64-darwin."
        default: x86_64-linux
        type: string

      attribute:
        description: "The attribute in the matrix to build, default is to build all packages in the flake for the build platform."
        default: default
        type: string

      root:
        description: "The path, relative to the git repository, where the flake of the project is."
        default: .
        type: string

      max-parallel:
        description: "The maximum parallel jobs to run when building."
        default: 0
        type: number

      nix-builders:
        description: SSH connection string for nix builders.
        type: string
        required: false

      nix-config-path:
        description: Path to a nix configuration file.
        type: string
        required: false

      nix-version:
        description: Nix version to install.
        type: string
        default: 2.11.1

      nix-build-locally:
        description: If nix should build on the local computer or remotely only.
        type: boolean
        default: false

      fail-fast:
        description: If building components should fail fast.
        type: boolean
        default: false

      cachix-name:
        description: Name of the cachix cache to use.
        type: string
        required: false

      use-remote-store:
        description: Whether to use remote store builds (--store <nix-builders>)
        type: boolean
        default: false

jobs:
  collect-matrix:
    name: Collect Components
    runs-on: ${{ inputs.build-platform == 'x86_64-linux' && 'ubuntu-latest' || inputs.build-platform == 'x86_64-darwin' && 'macos-latest' || 'unsupported-os' }}
    env:
      ATTRIBUTE: packages.${{ inputs.build-platform }}${{ format('.{0}', inputs.attribute) }}
      PACKAGES: packages.${{ inputs.build-platform }}
    outputs:
      components: ${{ steps.filter.outputs.components || steps.eval.outputs.components }}
    steps:
    - uses: actions/checkout@v3

    - name: Setup Nix (Nedryland 10.0.0)
      if: ${{ github.repository != 'goodbyekansas/nedryland' }}
      uses: goodbyekansas/nedryland/.github/actions/setup-nix@10.0.0
      with:
        access-key: ${{ secrets.nix-access-key }}
        builders-access-key: ${{ secrets.nix-builders-access-key }}
        builders: ${{ inputs.nix-builders }}
        config-path: ${{ inputs.nix-config-path }}
        version: ${{ inputs.nix-version }}
        cachix-name: ${{ inputs.cachix-name }}
        cachix-signing-key: ${{ secrets.cachix-signing-key }}
        cachix-auth-token: ${{ secrets.cachix-auth-token }}

    - name: Setup Nix (Locally)
      if: ${{ github.repository == 'goodbyekansas/nedryland' }}
      uses: ./.github/actions/setup-nix
      with:
        access-key: ${{ secrets.nix-access-key }}
        builders-access-key: ${{ secrets.nix-builders-access-key }}
        builders: ${{ inputs.nix-builders }}
        config-path: ${{ inputs.nix-config-path }}
        version: ${{ inputs.nix-version }}
        cachix-name: ${{ inputs.cachix-name }}
        cachix-signing-key: ${{ secrets.cachix-signing-key }}
        cachix-auth-token: ${{ secrets.cachix-auth-token }}

    - id: eval
      name: Collect Components
      working-directory: ${{ inputs.root }}
      run: |
        nix eval \
          ".#$ATTRIBUTE" \
          --json \
          --apply 'attrs: if attrs.nedrylandType or "" == "component-set" then (builtins.attrNames attrs.nedrylandComponents) else [ "${{ inputs.attribute }}" ]' \
          > components.json

        echo "components=$(cat components.json)" >> "$GITHUB_OUTPUT"

    - id: filter
      name: Filter Cached Components
      if: ${{ inputs.nix-config-path != '' }}
      working-directory: ${{ inputs.root }}
      run: |
        # read cache (substituters) from config
        # filter out default substituters and also handle when the default values ends with "/" but not config
        caches=()
        while IFS= read -r line; do
          caches+=("$line")
        done < <(nix show-config --json | \
          jq -r '.substituters | (.value - (.defaultValue + (.defaultValue | map(.[:-1]))) )[]')

        if [ "${#caches[@]}" -eq 0 ]; then
          echo "No non-default substituters set in config, skipping filter."
          exit 0
        fi

        echo "Looking for already built components in: ${caches[*]}"
        components=()
        while IFS= read -r line; do
            components+=("$line")
        done < <(jq -r '.[]' components.json)

        echo "# Filter Summary" >> "$GITHUB_STEP_SUMMARY"
        echo "" >> "$GITHUB_STEP_SUMMARY"

        checkCache() {
          component="$1"
          shift
          outPath="$1"
          shift
          for cache in "$@"; do
            echo "Checking for $component in $cache..."
            if curl -f -s "$cache/${outPath:11:32}.narinfo" >/dev/null; then
              echo "Found $component in $cache"
                touch skipped-components/"$component"
              break
            fi
          done

          if [ ! -f skipped-components/"$component" ]; then
            echo "$component not found in any cache, marking for build..."
            touch filtered-components/"$component"
          fi
        }

        mkdir -p filtered-components skipped-components

        echo "::group::Collecting outpaths..."
        out_paths=$(nix eval ".#$PACKAGES" --json)
        echo "Outpaths collected."
        echo "::endgroup::"

        batch_size=10
        for ((i = 0; i < ${#components[@]}; i += batch_size)); do
            for component in "${components[@]:i:batch_size}"; do
                out_path=$(jq -r ".$component" <<< "$out_paths")
                checkCache "$component" "$out_path" "${caches[@]}" &
            done
            wait
        done

        shopt -s nullglob
        filteredComponents=(filtered-components/*)
        filteredComponents=("${filteredComponents[@]##*/}")
        skippedComponents=(skipped-components/*)
        skippedComponents=("${skippedComponents[@]##*/}")

        if [ ${#skippedComponents[@]} -gt 0 ]; then
          echo "## Found in Cache
          " >> "$GITHUB_STEP_SUMMARY"

          for com in "${skippedComponents[@]}"; do
            echo "- $com" >> "$GITHUB_STEP_SUMMARY"
          done
        fi

        if [ ${#filteredComponents[@]} -gt 0 ]; then
          echo "## Building
          " >> "$GITHUB_STEP_SUMMARY"

          for com in "${filteredComponents[@]}"; do
            echo "- $com" >> "$GITHUB_STEP_SUMMARY"
          done
        fi

        jq --compact-output --null-input '$ARGS.positional' --args -- "${filteredComponents[@]}" > filtered-components.json

        echo "components=$(cat filtered-components.json)" >> "$GITHUB_OUTPUT"

      shell: bash

    - uses: actions/upload-artifact@v3
      if: always()
      with:
        name: components
        path: |
          ${{inputs.root}}/filtered-components.json
          ${{inputs.root}}/components.json
        if-no-files-found: ignore

  build-matrix:
    name: Build ${{ matrix.component }}
    needs: collect-matrix
    runs-on: ${{ inputs.build-platform == 'x86_64-linux' && 'ubuntu-latest' || inputs.build-platform == 'x86_64-darwin' && 'macos-latest' || 'unsupported-os' }}
    if: ${{ needs.collect-matrix.outputs.components != '[]' }}

    strategy:
      max-parallel: ${{ inputs.max-parallel }}
      matrix:
        component: ${{ fromJSON(needs.collect-matrix.outputs.components) }}
      fail-fast: ${{ inputs.fail-fast }}

    steps:
    - uses: actions/checkout@v3

    - name: Setup Nix (Nedryland 1)
      if: ${{ github.repository != 'goodbyekansas/nedryland' }}
      uses: goodbyekansas/nedryland/.github/actions/setup-nix@10.0.0
      with:
        access-key: ${{ secrets.nix-access-key }}
        builders-access-key: ${{ secrets.nix-builders-access-key }}
        builders: ${{ inputs.nix-builders }}
        config-path: ${{ inputs.nix-config-path }}
        version: ${{ inputs.nix-version }}
        cachix-name: ${{ inputs.cachix-name }}
        cachix-signing-key: ${{ secrets.cachix-signing-key }}
        cachix-auth-token: ${{ secrets.cachix-auth-token }}

    - name: Setup Nix (Locally)
      if: ${{ github.repository == 'goodbyekansas/nedryland' }}
      uses: ./.github/actions/setup-nix
      with:
        access-key: ${{ secrets.nix-access-key }}
        builders-access-key: ${{ secrets.nix-builders-access-key }}
        builders: ${{ inputs.nix-builders }}
        config-path: ${{ inputs.nix-config-path }}
        version: ${{ inputs.nix-version }}
        cachix-name: ${{ inputs.cachix-name }}
        cachix-signing-key: ${{ secrets.cachix-signing-key }}
        cachix-auth-token: ${{ secrets.cachix-auth-token }}

    - name: Build ${{ matrix.component }}
      working-directory: ${{ inputs.root }}
      run: |
        echo "building ${{ matrix.component }}"
        if [ -n "${{ inputs.nix-builders }}" ] && [ "${{ inputs.use-remote-store }}" = "true" ]; then
          nix build \
            -L \
            --eval-store auto \
            --store ssh-ng://${{ inputs.nix-builders }} \
            ".#packages.${{ inputs.build-platform }}.${{ matrix.component }}"
        else
          nix build \
            -L \
            ".#packages.${{ inputs.build-platform }}.${{ matrix.component }}" \
            ${{ !inputs.nix-build-locally && ' --max-jobs 0' || '' }}
        fi

    - name: Closure Stats
      continue-on-error: true
      working-directory: ${{ inputs.root }}
      run: |
        echo -e "\x1b[93;4;1mSize\x1b[0m"
        printf "\x1b[4m%-62.62s %8.8s %8.8s\x1b[0m\n" "Store Path" Self Closure
        # shellcheck disable=SC2183,SC2086,SC2046
        printf "%-62.62s %8.8s %8.8s\n" $(nix path-info -sSh ./result)
        echo ""
        echo -e "\x1b[93;4;1mContents\x1b[0m"
        printf "\x1b[4m%-62.62s %8.8s %8.8s\x1b[0m\n" "Store Path" Self Closure
        # shellcheck disable=SC2183,SC2086,SC2046
        printf "%-62.62s %8.8s %8.8s\n" $(nix path-info -rsSh ./result)

    - name: Post annotation
      if: ${{ failure() }}
      run: |
        directoryText="${{ inputs.root != '.' && format(' in directory {0}', inputs.root) || '' }}"
        echo "::error ::${{ matrix.component }} failed to build. \
        To reproduce locally run \`nix build .#${{ matrix.component }}\`$directoryText."

  matrix:
    name: All Components üçî
    runs-on: ubuntu-latest
    needs: [collect-matrix, build-matrix]
    if: always()
    steps:
      - name: Successful Matrix Build
        if: ${{ !(contains(needs.*.result, 'failure')) && !(contains(needs.*.result, 'cancelled')) }}
        run: exit 0
      - name: Failing Matrix Build
        if: ${{ contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled') }}
        run: exit 1
